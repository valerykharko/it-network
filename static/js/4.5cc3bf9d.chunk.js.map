{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.module.css"],"names":["DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","value","onChange","e","body","target","updateNewMessageBody","placeholder","onClick","sendMessage","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","updateNewMessageBodyCreator","sendMessageCreator","Component","RedirectComponent","this","React","module","exports"],"mappings":"kKAaeA,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACE,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCDjBC,EAJC,SAACT,GACf,OAAO,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,WC4C5BC,EA3CC,SAACX,GAEf,IAAIY,EAAQZ,EAAMa,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OACtC,cAAC,EAAD,CAAYT,KAAMS,EAAET,KAAiBN,GAAIe,EAAEf,IAAZe,EAAEf,OAG/BgB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OACxC,cAAC,EAAD,CAASV,QAASU,EAAEV,SAAcU,EAAElB,OAGlCmB,EAAiBT,EAAMS,eAW3B,OACE,sBAAKlB,UAAWC,IAAEW,QAAlB,UACE,qBAAKZ,UAAWC,IAAEkB,aAAlB,SAAiCR,IACjC,qBAAKX,UAAWC,IAAEe,SAAlB,SAA6BD,IAC7B,gCACE,8BACE,0BACEK,MAAOF,EACPG,SAbe,SAACC,GACxB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpBvB,EAAM4B,qBAAqBF,IAYnBG,YAAY,yBAGhB,8BACE,wBAAQC,QAtBS,WACvB9B,EAAM+B,eAqBA,2B,sDCrCNC,EAA6B,SAACpB,GAAD,MAAY,CAC3CqB,OAAQrB,EAAMsB,KAAKD,S,QCsBNE,sBACbC,aAlBoB,SAACxB,GACrB,MAAO,CACLC,YAAaD,EAAMC,gBAIE,SAACwB,GACxB,MAAO,CACLT,qBAAsB,SAACF,GACrBW,EAASC,YAA4BZ,KAEvCK,YAAa,WACXM,EAASE,qBDdiB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAK1C,MAAMiC,OACT,cAACO,EAAD,eAAeE,KAAK1C,QADI,cAAC,IAAD,CAAUO,GAAI,eAHJ,GACboC,IAAMH,WAWtC,OAJqCJ,YAAQJ,EAARI,CACnCK,KCUWN,CAGbxB,I,mBC7BFiC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU","file":"static/js/4.5cc3bf9d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id}/>\r\n  ));\r\n\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let onSendMessageClick = () => {\r\n    props.sendMessage();\r\n  };\r\n\r\n  let onNewMessageChange = (e) => {\r\n    let body = e.target.value;\r\n    props.updateNewMessageBody(body)\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>{messagesElements}</div>\r\n      <div>\r\n        <div>\r\n          <textarea\r\n            value={newMessageBody}\r\n            onChange={onNewMessageChange}\r\n            placeholder=\"Enter your message\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <button onClick={onSendMessageClick}>Send</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from \"react\";\nimport {\n  sendMessageCreator,\n  updateNewMessageBodyCreator,\n} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    updateNewMessageBody: (body) => {\n      dispatch(updateNewMessageBodyCreator(body));\n    },\n    sendMessage: () => {\n      dispatch(sendMessageCreator());\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3bBNE\",\"dialogsItems\":\"Dialogs_dialogsItems__2OdiR\",\"active\":\"Dialogs_active__2MkfO\",\"messages\":\"Dialogs_messages__29dMw\",\"message\":\"Dialogs_message__3f7Rj\"};"],"sourceRoot":""}